name: Garmin Data Sync

on:
  workflow_dispatch:
  schedule:
    # Runs every day at 8:00 PM UTC (adjust timezone as needed)
    # For EST (UTC-5): use '0 1 * * *' for 8:00 PM EST
    # For PST (UTC-8): use '0 4 * * *' for 8:00 PM PST
    # For CST (UTC-6): use '0 2 * * *' for 8:00 PM CST
    - cron: '0 20 * * *'
  push:
    branches:
      - master
      - main
    paths:
      - run_page/garmin_sync.py
      - run_page/gen_svg.py
      - requirements.txt
      - .github/workflows/run_data_sync.yml

env:
  # Customize these settings
  ATHLETE: Perry ong
  TITLE: Perry Ong Running 
  MIN_GRID_DISTANCE: 10 # Minimum distance for grid view (in km)
  TITLE_GRID: Over 10km Runs
  
  # Optional settings
  SAVE_DATA_IN_GITHUB_CACHE: false
  DATA_CACHE_PREFIX: 'track_data'
  BUILD_GH_PAGES: true # Set to false if you don't need GitHub Pages
  GENERATE_MONTH_OF_LIFE: true
  BIRTHDAY_MONTH: 1994-09 # Format: YYYY-MM

jobs:
  sync:
    name: Sync Garmin Data
    runs-on: ubuntu-latest
    outputs:
      SAVE_DATA_IN_GITHUB_CACHE: ${{ steps.set_output.outputs.SAVE_DATA_IN_GITHUB_CACHE }}
      DATA_CACHE_PREFIX: ${{ steps.set_output.outputs.DATA_CACHE_PREFIX }}
      BUILD_GH_PAGES: ${{ steps.set_output.outputs.BUILD_GH_PAGES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Cache Data Files
        if: env.SAVE_DATA_IN_GITHUB_CACHE == 'true'
        uses: actions/cache@v4
        with:
          path: |
            activities
            assets
            GPX_OUT
            TCX_OUT
            FIT_OUT
            Workouts
            run_page/data.db
            src/static/activities.json
            imported.json
          key: ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-
            ${{ env.DATA_CACHE_PREFIX }}-

      - name: Sync Garmin Data
        run: |
          python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING }}
        # To sync only running activities, use: --only-run
        # To generate TCX files, use: --tcx
        # Example: python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING }} --only-run

      - name: Generate SVG Visualizations
        env:
          TITLE: ${{ env.TITLE }}
          TITLE_GRID: ${{ env.TITLE_GRID }}
          ATHLETE: ${{ env.ATHLETE }}
          MIN_GRID_DISTANCE: ${{ env.MIN_GRID_DISTANCE }}
        run: |
          # Generate GitHub-style calendar view
          python run_page/gen_svg.py --from-db --title "$TITLE" --type github --github-style "align-firstday" --athlete "$ATHLETE" --special-distance 10 --special-distance2 20 --special-color yellow --special-color2 red --output assets/github.svg --use-localtime --min-distance 0.5
          
          # Generate grid view for longer runs
          python run_page/gen_svg.py --from-db --title "$TITLE_GRID" --type grid --athlete "$ATHLETE" --output assets/grid.svg --special-color yellow --special-color2 red --special-distance 20 --special-distance2 40 --use-localtime --min-distance "$MIN_GRID_DISTANCE"
          
          # Generate circular/poster view
          python run_page/gen_svg.py --from-db --type circular --use-localtime
          
          # Generate current year view
          python run_page/gen_svg.py --from-db --year $(date +"%Y") --language zh_CN --title "$(date +"%Y") Running" --type github --github-style "align-firstday" --athlete "$ATHLETE" --special-distance 10 --special-distance2 20 --special-color yellow --special-color2 red --output assets/github_$(date +"%Y").svg --use-localtime --min-distance 0.5

      - name: Generate Month of Life Visualizations
        if: env.GENERATE_MONTH_OF_LIFE == 'true'
        env:
          BIRTHDAY_MONTH: ${{ env.BIRTHDAY_MONTH }}
          ATHLETE: ${{ env.ATHLETE }}
        run: |
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_running.svg --use-localtime --athlete "$ATHLETE" --title "Runner Month of Life" --sport-type running
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_walking.svg --use-localtime --athlete "$ATHLETE" --title "Walker Month of Life" --sport-type walking
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_hiking.svg --use-localtime --athlete "$ATHLETE" --title "Hiker Month of Life" --sport-type hiking
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_cycling.svg --use-localtime --athlete "$ATHLETE" --title "Cyclist Month of Life" --sport-type cycling
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol.svg --use-localtime --athlete "$ATHLETE" --title "Month of Life" --sport-type all
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_swimming.svg --use-localtime --athlete "$ATHLETE" --title "Swimmer Month of Life" --sport-type swimming
          python run_page/gen_svg.py --from-db --type monthoflife --birth "$BIRTHDAY_MONTH" --special-color "#f9d367" --special-color2 "#f0a1a8" --output assets/mol_skiing.svg --use-localtime --athlete "$ATHLETE" --title "Skier Month of Life" --sport-type skiing

      - name: Commit and Push Changes
        if: env.SAVE_DATA_IN_GITHUB_CACHE != 'true'
        run: |
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'
          git add .
          git commit -m 'Update Garmin data and visualizations' || echo 'No changes to commit'
          git push || echo 'Nothing to push'

      - name: Set Output for GitHub Pages
        id: set_output
        env:
          SAVE_DATA_IN_GITHUB_CACHE: ${{ env.SAVE_DATA_IN_GITHUB_CACHE }}
          DATA_CACHE_PREFIX: ${{ env.DATA_CACHE_PREFIX }}
          BUILD_GH_PAGES: ${{ env.BUILD_GH_PAGES }}
        run: |
          echo "SAVE_DATA_IN_GITHUB_CACHE=$SAVE_DATA_IN_GITHUB_CACHE" >> "$GITHUB_OUTPUT"
          echo "DATA_CACHE_PREFIX=$DATA_CACHE_PREFIX" >> "$GITHUB_OUTPUT"
          echo "BUILD_GH_PAGES=$BUILD_GH_PAGES" >> "$GITHUB_OUTPUT"

  publish_github_pages:
    if: needs.sync.result == 'success' && needs.sync.outputs.BUILD_GH_PAGES == 'true'
    name: Build and Publish GitHub Pages
    uses: ./.github/workflows/gh-pages.yml
    with:
      save_data_in_github_cache: ${{needs.sync.outputs.SAVE_DATA_IN_GITHUB_CACHE == 'true'}}
      data_cache_prefix: ${{needs.sync.outputs.DATA_CACHE_PREFIX}}
    needs:
      - sync
